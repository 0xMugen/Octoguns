{"version":3,"sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["export * from \"@dojoengine/torii-wasm\";\n\nexport * from \"./utils\";\n","import { ComparisonOperator, ValueType } from \"@dojoengine/torii-wasm\";\n\ninterface NumberFilter {\n    eq?: number;\n    neq?: number;\n    gt?: number;\n    gte?: number;\n    lt?: number;\n    lte?: number;\n}\n\nconst filterMapping: Record<keyof NumberFilter, ComparisonOperator> = {\n    eq: \"Eq\",\n    neq: \"Neq\",\n    gt: \"Gt\",\n    gte: \"Gte\",\n    lt: \"Lt\",\n    lte: \"Lte\",\n};\n\n// This updates the type of a passed in generic object to extend all\n// number fields to be either a NumberFilter or a number.\n// This will allow number fields to have more complicated queries,\n// e.g. { age: { gt: 10 } }.\ntype ConvertNumberToFilter<T extends object> = {\n    [K in keyof T]: T[K] extends number ? NumberFilter | number : T[K];\n};\n\n// Given a model, this type represents a query that can be made against it.\n// This type is recursive and can be used to represent complex queries.\n// For example:\n// {\n//     OR: [\n//         { age: { gt: 10 } },\n//         { name: \"John\" }\n//     ]\n// }\nexport type ModelClause<T extends object> = {\n    OR?: ModelClause<T>[];\n    AND?: ModelClause<T>[];\n} & Partial<ConvertNumberToFilter<T>>;\n\n// Converts an actual value inside a passed in query to a Torii ValueType\nfunction valueToValueType(value: any): ValueType {\n    if (typeof value === \"number\") {\n        return { Int: value };\n    }\n    if (typeof value === \"string\") {\n        return { String: value };\n    }\n    if (typeof value === \"boolean\") {\n        return { VBool: value };\n    }\n    if (Array.isArray(value) && value.every((v) => typeof v === \"number\")) {\n        return { Bytes: value };\n    }\n\n    throw new Error(\"Unsupported value type\");\n}\n\n// Converts a single query line to a Torii value and operator\n// e.g. { age: { gt: 10 } } -> { operator: \"Gt\", value: { primitive_type: { Felt252: \"\" }, value_type: { Int: 10 } } }\n// or { age: 10 } -> { operator: \"Eq\", value: { primitive_type: { Felt252: \"\" }, value_type: { Int: 10 } } }\n// The Felt252 is hardcoded since it currently isn't used in the Torii API\nexport function valueToToriiValueAndOperator(\n    value: NumberFilter | number | bigint | string | boolean\n): {\n    operator: ComparisonOperator;\n    value: {\n        primitive_type: { Felt252: \"\" };\n        value_type: ValueType;\n    };\n} {\n    if (typeof value === \"object\") {\n        const key = Object.keys(value)[0] as keyof NumberFilter;\n        const operator = filterMapping[key];\n        const val = value[key];\n        const valueType = valueToValueType(val);\n        return {\n            operator,\n            value: {\n                primitive_type: { Felt252: \"\" },\n                value_type: valueType,\n            },\n        };\n    }\n\n    const valueType = valueToValueType(value);\n    return {\n        operator: \"Eq\",\n        value: {\n            primitive_type: { Felt252: \"\" },\n            value_type: valueType,\n        },\n    };\n}\n"],"mappings":"AAAA,WAAc,yBCWd,IAAMA,EAAgE,CAClE,GAAI,KACJ,IAAK,MACL,GAAI,KACJ,IAAK,MACL,GAAI,KACJ,IAAK,KACT,EAyBA,SAASC,EAAiBC,EAAuB,CAC7C,GAAI,OAAOA,GAAU,SACjB,MAAO,CAAE,IAAKA,CAAM,EAExB,GAAI,OAAOA,GAAU,SACjB,MAAO,CAAE,OAAQA,CAAM,EAE3B,GAAI,OAAOA,GAAU,UACjB,MAAO,CAAE,MAAOA,CAAM,EAE1B,GAAI,MAAM,QAAQA,CAAK,GAAKA,EAAM,MAAOC,GAAM,OAAOA,GAAM,QAAQ,EAChE,MAAO,CAAE,MAAOD,CAAM,EAG1B,MAAM,IAAI,MAAM,wBAAwB,CAC5C,CAMO,SAASE,EACZF,EAOF,CACE,GAAI,OAAOA,GAAU,SAAU,CAC3B,IAAMG,EAAM,OAAO,KAAKH,CAAK,EAAE,CAAC,EAC1BI,EAAWN,EAAcK,CAAG,EAC5BE,EAAML,EAAMG,CAAG,EACfG,EAAYP,EAAiBM,CAAG,EACtC,MAAO,CACH,SAAAD,EACA,MAAO,CACH,eAAgB,CAAE,QAAS,EAAG,EAC9B,WAAYE,CAChB,CACJ,CACJ,CAEA,IAAMA,EAAYP,EAAiBC,CAAK,EACxC,MAAO,CACH,SAAU,KACV,MAAO,CACH,eAAgB,CAAE,QAAS,EAAG,EAC9B,WAAYM,CAChB,CACJ,CACJ","names":["filterMapping","valueToValueType","value","v","valueToToriiValueAndOperator","key","operator","val","valueType"]}