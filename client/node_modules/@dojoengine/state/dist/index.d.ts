import * as _dojoengine_torii_client from '@dojoengine/torii-client';
import { ToriiClient, EntityKeysClause, Clause, PatternMatching } from '@dojoengine/torii-client';
import { Schema, Component, Metadata } from '@dojoengine/recs';

/**
 * Fetches and synchronizes entities with their components. This is useful for initializing the world state.
 * @param client - The client instance for API communication.
 * @param components - An array of component definitions.
 * @param entityKeyClause - An array of entities to synchronize.
 * @param limit - The maximum number of entities to fetch per request (default: 100).
 * @returns A promise that resolves when synchronization is complete.
 *
 * @example
 * // Fetch all entities and their components
 * const components = createClientComponents({ contractComponents });
 * await getSyncEntities(client, components, undefined);
 *
 * @example
 * // Fetch all entities and their components via a query
 * const components = createClientComponents({ contractComponents });
 * await getSyncEntities(client, components, entityKeyClause);
 *
 * This function fetches all entities and their components from the client, then
 * synchronizes the entities with the specified components. It uses the provided
 * EntityKeysClause (if any) to filter entities and the specified components to
 * determine which data to retrieve. The function continues fetching until all
 * matching entities have been retrieved, using the 'limit' parameter to control
 * the batch size of each request.
 */
declare const getSyncEntities: <S extends Schema>(client: ToriiClient, components: Component<S, Metadata, undefined>[], entityKeyClause: EntityKeysClause[], limit?: number) => Promise<_dojoengine_torii_client.Subscription>;
/**
 * Fetches and synchronizes events with their models. This is useful for initializing the world state with event data.
 * @param client - The client instance for API communication.
 * @param components - An array of component definitions.
 * @param clause - An optional clause to filter events.
 * @param entityKeyClause - An array of entities to synchronize.
 * @param limit - The maximum number of events to fetch per request (default: 100).
 * @returns A promise that resolves when synchronization is complete.
 *
 * @example
 * // Fetch all events and their components
 * const components = createClientComponents({ contractComponents });
 * await getSyncEvents(client, components, undefined, entityKeyClause);
 *
 * @example
 * // Fetch all events and their components via a query
 * const components = createClientComponents({ contractComponents });
 * await getSyncEvents(client, components, clause, entityKeyClause);
 *
 * This function fetches all events and their components from the client, then
 * synchronizes the events with the specified components. It uses the provided
 * Clause (if any) to filter events and the specified components to determine
 * which data to retrieve. The function continues fetching until all matching
 * events have been retrieved, using the 'limit' parameter to control the batch
 * size of each request.
 */
declare const getSyncEvents: <S extends Schema>(client: ToriiClient, components: Component<S, Metadata, undefined>[], clause: Clause | undefined, entityKeyClause: EntityKeysClause[], limit?: number) => Promise<_dojoengine_torii_client.Subscription>;
/**
 * Fetches all entities and their components from the client.
 * @param client - The client instance for API communication.
 * @param components - An array of component definitions.
 * @param limit - The maximum number of entities to fetch per request (default: 100).
 *
 * @example
 * const components = createClientComponents({ contractComponents });
 * await getEntities(client, components, 100);
 *
 * This function performs paginated queries to fetch all entities and their components.
 */
declare const getEntities: <S extends Schema>(client: ToriiClient, components: Component<S, Metadata, undefined>[], limit?: number) => Promise<void>;
/**
 * Fetches event messages from the client and synchronizes them with the specified components.
 * @param client - The client instance for API communication.
 * @param components - An array of component definitions.
 * @param limit - The maximum number of event messages to fetch per request (default: 100).
 * @param clause - An optional clause to filter event messages.
 */
declare const getEvents: <S extends Schema>(client: ToriiClient, components: Component<S, Metadata, undefined>[], limit: number | undefined, clause: Clause | undefined) => Promise<void>;
/**
 * Fetches entities and their components from the client based on specified criteria.
 * @param client - The client instance for API communication.
 * @param components - An array of component definitions to fetch.
 * @param entityKeyClause - An optional EntityKeysClause to filter entities by their keys.
 * @param patternMatching - The pattern matching strategy for entity keys (default: "FixedLen").
 * @param limit - The maximum number of entities to fetch per request (default: 1000).
 *
 * @example
 * const components = createClientComponents({ contractComponents });
 * await getEntitiesQuery(client, components, undefined, "FixedLen", 1000);
 *
 * @example
 * const components = createClientComponents({ contractComponents });
 * await getEntitiesQuery(client, components, { Keys: { keys: ["0x1"], models: ["Position"] } }, "FixedLen", 1000);
 *
 * @example
 * const components = createClientComponents({ contractComponents });
 * await getEntitiesQuery(client, components, { HashedKeys: ["0x1"] }, "FixedLen", 1000);
 *
 * This function performs paginated queries to fetch all matching entities and their
 * components. It uses the provided EntityKeysClause (if any) to filter entities and
 * the specified components to determine which data to retrieve. The function continues
 * fetching until all matching entities have been retrieved, using the 'limit' parameter
 * to control the batch size of each request.
 */
declare const getEntitiesQuery: <S extends Schema>(client: ToriiClient, components: Component<S, Metadata, undefined>[], entityKeyClause: EntityKeysClause, patternMatching?: PatternMatching, limit?: number) => Promise<void>;
/**
 * Sets up a subscription to sync entity updates.
 * @param client - The client instance for API communication.
 * @param components - An array of component definitions.
 * @param entityKeyClause - An optional EntityKeysClause to filter entities.
 * @returns A promise that resolves with the subscription handler.
 * The handler can be used to cancel the subscription when needed.
 * @example
 * const sync = await getSyncEntities(client, components, entityKeyClause);
 * // later...
 * sync.cancel(); // cancel the subscription
 */
declare const syncEntities: <S extends Schema>(client: ToriiClient, components: Component<S, Metadata, undefined>[], entityKeyClause: EntityKeysClause[]) => Promise<_dojoengine_torii_client.Subscription>;
/**
 * Sets up a subscription to sync event messages.
 * @param client - The client instance for API communication.
 * @param components - An array of component definitions.
 * @param entityKeyClause - An optional EntityKeysClause to filter entities.
 * @returns A promise that resolves with the subscription handler.
 * The handler can be used to cancel the subscription when needed.
 * @example
 * const sync = await syncEvents(client, components, entityKeyClause);
 * // later...
 * sync.cancel(); // cancel the subscription
 */
declare const syncEvents: <S extends Schema>(client: ToriiClient, components: Component<S, Metadata, undefined>[], entityKeyClause: EntityKeysClause[]) => Promise<_dojoengine_torii_client.Subscription>;
/**
 * Updates the components of entities in the local state.
 * @param entities - An array of entities with their updated component data.
 * @param components - An array of component definitions.
 */
declare const setEntities: <S extends Schema>(entities: any, components: Component<S, Metadata, undefined>[]) => Promise<void>;

export { getEntities, getEntitiesQuery, getEvents, getSyncEntities, getSyncEvents, setEntities, syncEntities, syncEvents };
